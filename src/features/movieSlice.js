import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchGenre, fetchMovie, fetchMovieDetail } from "./movieAPI";

const initialState = {
  genre: [],
  list: [],
  page: 1,
  total_pages: 0,
  total_results: 0,
  movieDetail: {},
  dates: {},
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getGenre = createAsyncThunk("movie/fetchGenre", async () => {
  const response = await fetchGenre();
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});

export const getMovie = createAsyncThunk("movie/fetchMovie", async (page) => {
  const response = await fetchMovie(page);
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});

export const getMovieDetail = createAsyncThunk(
  "movie/fetchMovieDetail",
  async (id) => {
    const response = await fetchMovieDetail(id);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const movieSlice = createSlice({
  name: "movie",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setPageActive: (state, action) => {
      state.page = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getGenre.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getGenre.fulfilled, (state, action) => {
        state.status = "idle";
        state.genre = action.payload.genres;
      })
      .addCase(getMovie.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getMovie.fulfilled, (state, action) => {
        state.status = "idle";
        state.list = action.payload.results;
        state.page = action.payload.page;
        state.total_pages = action.payload.total_pages;
        state.total_results = action.payload.total_results;
        state.dates = action.payload.dates;
      })
      .addCase(getMovieDetail.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getMovieDetail.fulfilled, (state, action) => {
        state.status = "idle";
        state.movieDetail = action.payload;
      });
  },
});

export const { setPageActive } = movieSlice.actions;

export const selectGenre = (state) => state.movie.genre;
export const selectMovie = (state) => state.movie.list;
export const selectMovieDetail = (state) => state.movie.movieDetail;
export const selectPageActive = (state) => state.movie.page;
export const selectTotalPage = (state) => state.movie.total_pages;

export default movieSlice.reducer;
